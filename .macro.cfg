[gcode_macro VARIABLES]
variable_min_temp_extruder: 170
variable_load_unload_temp: 200
variable_wipe_temp: 170
variable_print_end_retraction_distance: 14
variable_purge_distance: 16
gcode:

[virtual_sdcard]
path: /home/biqu/printer_data/gcodes

[pause_resume]

[display_status]

[gcode_macro Probe_bed]
gcode:
  UPDATE_DELAYED_GCODE ID=check_temp DURATION=0 # clear check_temp_delay
  OG28
  BED_MESH_CALIBRATE

[gcode_macro gantry_calibrate]
gcode:
  UPDATE_DELAYED_GCODE ID=check_temp DURATION=0 # clear check_temp_delay
  M118 Go to Console Menu to Review Gantry Calibrate Results
  OG28
  G0 X10 Y50 Z50 F3500
  G0 X30 F10000
  G0 X10
  G0 X30
  G0 X10
  MANUAL_Z_TILT

[gcode_macro Park_Nozzle]
gcode:
  {% set max_x = printer.toolhead.axis_maximum.x|float %}
  {% set max_y = printer.toolhead.axis_maximum.y|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  UPDATE_DELAYED_GCODE ID=check_temp DURATION=0 # clear check_temp_delay
  OG28
  G0 X{max_x/4} Y{max_y-50} Z{max_z/2} F3500

[gcode_macro PRESENT_BED]
description: Move bed forward to present print.
gcode:
  {% set max_y = printer.toolhead.axis_maximum.y|float %}  # define the max travel
  UPDATE_DELAYED_GCODE ID=check_temp DURATION=0 # clear check_temp_delay
  {% if not 'y' in printer.toolhead.homed_axes %}
    G28 Y
  {% endif %}
  G0 Y{max_y-10} F4500   # Make it do a little jog back if it is already forward.
  G0 Y{max_y} F4500

[gcode_macro Clean_nozzle]
gcode:
  UPDATE_DELAYED_GCODE ID=check_temp DURATION=0 # clear check_temp_delay
  OG28
  G0 Z10 X55 Y192 F4500
  {% if printer.extruder.temperature < printer["gcode_macro VARIABLES"].wipe_temp %}
    M109 S{printer["gcode_macro VARIABLES"].wipe_temp}
  {% endif %}
  G0 Z-0.5 F2500
  G0 X125
  G0 X55
  G0 X125
  G0 X55
  G0 X125
  G0 X55
  G0 X125
  G0 X55
  G0 Z10

[gcode_macro PURGE]
gcode:
  M82 					# set extruder to absolute mode
  {% if printer.extruder.temperature < printer["gcode_macro VARIABLES"].min_temp_extruder %}
    M109 S{printer["gcode_macro VARIABLES"].load_unload_temp}
  {% endif %}
  OG28
  G0 X20 Y-10 Z0 F3000
  G92 E-{printer["gcode_macro VARIABLES"].purge_distance}			# set extruder position to the purge_distance
  G0 E0 F150
  M106
  G4 P3000
  G0 Y0 F3000  # bump off purge tail
  G0 Z5
  M107

[gcode_macro START]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|float %}
    {% set WIPE_TEMP = params.WIPE_TEMP|default(170)|float %} #standby temp
  # Blank M117 to clear any error message from a previous print
  M117
  UPDATE_DELAYED_GCODE ID=check_temp DURATION=0 # clear check_temp_delay
  G90 					# absolute positioning
  M82 					# set extruder to absolute mode
  M140 S{BED_TEMP}
  M104 S{EXTRUDER_TEMP}
  OG28
  BED_MESH_CLEAR
  BED_MESH_CALIBRATE
  G0 X25 Y0 Z10 F3000
  M109 S{EXTRUDER_TEMP}
  M190 S{BED_TEMP}
  G92 E-{printer["gcode_macro VARIABLES"].purge_distance}			# set extruder position to the purge_distance
  G0 Z2 E0 F150

[gcode_macro END]
gcode:
  {% set REMOVAL_TEMP = params.REMOVAL_TEMP|default(40)|float %}
  {% set min_x = printer.toolhead.axis_minimum.x|float %}  # define the max travel
  {% set max_y = printer.toolhead.axis_maximum.y|float %}  # define the max travel
  M104 S0 # turn off temperature
  M140 S{REMOVAL_TEMP} # lower bed temp to removal temp
  G0 F3000
  G28 Z
  G0 X{min_x+1} Y{max_y}
  {% if printer.extruder.temperature > printer["gcode_macro VARIABLES"].min_temp_extruder %}
    M83
    G1 E-{printer["gcode_macro VARIABLES"].print_end_retraction_distance}
  {% endif %}

[gcode_macro JOB_COMPLETE]
variable_removal_temp: 40
gcode:
  {% set REMOVAL_TEMP = params.REMOVAL_TEMP|default(40)|float %}
  SET_GCODE_VARIABLE MACRO=JOB_COMPLETE VARIABLE=removal_temp VALUE={REMOVAL_TEMP} # used for the delayed Gcode of presenting bed
  {% if printer.extruder.temperature > printer["gcode_macro VARIABLES"].min_temp_extruder %}
    M83
    G1 E-{printer["gcode_macro VARIABLES"].print_end_retraction_distance}
  {% endif %}
  SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
  M104 S0 # turn off temperature
  M117 Waiting for bed to reach part removal temperature.
  G0 F3000
  G28 Z
  G0 Y0  # hold print at back until removal temp
  M140 S{REMOVAL_TEMP}  # Set the bed to removal temp
  UPDATE_DELAYED_GCODE ID=check_temp DURATION=5 # start a 5 second check for the bed to reach removal temp

[delayed_gcode check_temp]
gcode:
  {% set max_y = printer.toolhead.axis_maximum.y|float %}  # define the max travel
  {% set REMOVAL_TEMP = printer["gcode_macro JOB_COMPLETE"].removal_temp|float %}
  {% if printer.heater_bed.temperature > (printer.heater_bed.target + 1) %}
    UPDATE_DELAYED_GCODE ID=check_temp DURATION=5 # reset the delayed Gcode for 5 seconds
  {% else %}
    G0 Y{max_y}  # Present print forward
    M117
    END REMOVAL_TEMP={REMOVAL_TEMP}
  {% endif %}

[gcode_macro LOAD_FILAMENT]
gcode:
  {% if printer.extruder.temperature < printer["gcode_macro VARIABLES"].min_temp_extruder %}
  M109 S{printer["gcode_macro VARIABLES"].load_unload_temp}
  {% endif %}
  {% if (printer.print_stats.state not in ['printing', 'paused']) %}
    Park_Nozzle
  {% endif %}
  M83
  G0 E50 F150
  M82

[gcode_macro UNLOAD_FILAMENT]
gcode:
  {% if printer.extruder.temperature < printer["gcode_macro VARIABLES"].min_temp_extruder %}
  M109 S{printer["gcode_macro VARIABLES"].load_unload_temp}
  {% endif %}
  {% if (printer.print_stats.state not in ['printing', 'paused']) %}
    Park_Nozzle
  {% endif %}
  M83
  G0 E-150 F600
  M82

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    TURN_OFF_HEATERS
    M107
    G28 Z0
    END
    CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 5.0
variable_ext_target: 0  # Variable to save current extruder target temp for RESUME
gcode:
    # Save extruder temp for RESUME macro to use
    {% set EXT_TEMP = printer.extruder.target %}
    SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=ext_target VALUE={ EXT_TEMP }
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set do_park = params.PARK|default(true)|lower == 'true' %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
      G1 Z{z_safe} F900
      G90
      {% if do_park %}
        G1 X{x_park} Y{y_park} F6000
      {% endif %}
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}

[gcode_macro M25]
description: Use same pause macro for M25 command
rename_existing: M9925
gcode:
    PAUSE

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    {% if printer.pause_resume.is_paused %}  # Don't run resume if not paused.  Happens if you double tap the resume button in Klipperscreen.
        M117 Resuming. Please Wait...
        {% set EXT_TEMP = printer["gcode_macro PAUSE"].ext_target %}  # Get extruder temp saved in PAUSE
        ##### read E from pause macro #####
        {% set E = printer["gcode_macro PAUSE"].extrude|float %}
        #### get VELOCITY parameter if specified ####
        {% if 'VELOCITY' in params|upper %}
          {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
        {%else %}
          {% set get_params = "" %}
        {% endif %}
        ##### end of definitions #####
        {% if printer.extruder.temperature < (EXT_TEMP - 5) %}  # Don't display reheating message if we are only off by a few degrees
          M117 Reheating to {EXT_TEMP}
        {% endif %}
        M109 S{EXT_TEMP}
        M117
        {% if printer.extruder.can_extrude|lower == 'true' %}
          G91
          G1 E{E} F2100
        {% else %}
          {action_respond_info("Extruder not hot enough")}
        {% endif %}
        RESUME_BASE {get_params}
    {% endif %}

[gcode_macro M24]
description: Use same pause macro for M24 command
rename_existing: M9924
gcode:
    RESUME

[gcode_macro M600]
description: Pause the actual running print and unload filament
gcode:
    {% set y_filament_change = printer.toolhead.axis_minimum.y|float + 5.0 %}
    PAUSE PARK=false
    G1 X50 Y{y_filament_change} F6000
    UNLOAD_FILAMENT

[gcode_macro OG28]
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28 RESET_SETTINGS={ params.RESET_SETTINGS|default('true') }
  {% endif %}

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}

    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-3} MAXIMUM={s+3}
    {% endif %}

[gcode_macro M190]
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-1} MAXIMUM={s+1}
    {% endif %}

[gcode_macro m201]
description: Sets maximum accelleration.
  Usage: M201 [X<accel>] [Y<accel>]
variable_max_accel: 1.7976931348623157e+308
gcode:
  {% set km = printer["gcode_macro _km_globals"] %}
  {% if 'X' in params or 'Y' in params %}
    {% set accel = (params.X|default(params.Y)|float,
                    params.Y|default(params.X)|float)|min %}
    SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}

[gcode_macro m203]
description: Sets maximum velocity.
  Usage: M203 [X<velocity>] [Y<velocity>]
gcode:
  {% if 'X' in params or 'Y' in params %}
    {% set velocity = (params.X|default(params.Y)|float,
                       params.Y|default(params.X)|float)|min %}
    SET_VELOCITY_LIMIT VELOCITY="{velocity}"
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}

[gcode_macro m205]
description: Sets square corner velocity.
  Usage: M203 [X<velocity>] [Y<velocity>]
gcode:
  {% if 'X' in params or 'Y' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{
      (params.X|default(0)|float, params.Y|default(0)|float)|min}"
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}